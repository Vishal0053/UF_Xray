import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import logo from '../Components/Imgs/logo-r.png';

function addHeader(doc, title) {
  doc.setProperties({ title });
  // Brand color #2563EB -> [37,99,235]
  try {
    // Slightly wider, short logo; adjust to avoid intersecting the divider line
    doc.addImage(logo, 'PNG', 14, 10, 18, 10);
  } catch (_) {
    // ignore if image fails to load in certain environments
  }
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(37, 99, 235);
  doc.setFontSize(18);
  // Title slightly right of logo, comfortably above the divider
  doc.text(title, 36, 18);
  doc.setTextColor(0, 0, 0);
  doc.setDrawColor(200);
  // Move divider lower so it doesn't cross the title baseline
  doc.line(14, 24, 196, 24);
}

function addFooter(doc) {
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(9);
    doc.setTextColor(120);
    doc.text(`Generated by UF XRAY â€¢ Page ${i} of ${pageCount}`.trim(), 14, 290);
  }
}

function riskBadge(level) {
  switch ((level || '').toUpperCase()) {
    case 'HIGH':
      return 'HIGH (critical)';
    case 'MEDIUM':
      return 'MEDIUM (elevated)';
    case 'LOW':
      return 'LOW (minor)';
    case 'SAFE':
      return 'SAFE';
    default:
      return String(level || 'UNKNOWN');
  }
}

function formatKV(obj = {}) {
  return Object.entries(obj).map(([k, v]) => [k.replaceAll('_', ' '), String(v)]);
}

function wrapJson(doc, text, width = 182) {
  return doc.splitTextToSize(text, width);
}

function nowTs() {
  const d = new Date();
  const pad = (n) => String(n).padStart(2, '0');
  return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
}

export function downloadUrlScanPDF(scan, filenameHint = 'url-scan-report') {
  const doc = new jsPDF();
  addHeader(doc, 'URL Security Scan Report');

  // Summary
  const summaryBody = [
    ['URL', scan.url || '-'],
    ['Threat Level', riskBadge(scan.threat_level)],
    ['Risk Score', `${scan.risk_score ?? '-'} / 100`],
    ['Timestamp', scan.scan_timestamp || nowTs()],
    ['Resolved IPs', Array.isArray(scan.resolved_ips) && scan.resolved_ips.length ? scan.resolved_ips.join(', ') : '-'],
  ];

  autoTable(doc, {
    startY: 26,
    head: [['Field', 'Value']],
    body: summaryBody,
    styles: { cellPadding: 3, fontSize: 10 },
    headStyles: { fillColor: [37, 99, 235] },
  });

  // Structure Analysis
  const startStruct = doc.lastAutoTable.finalY + 8;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Structure Analysis', 14, startStruct);
  autoTable(doc, {
    startY: startStruct + 3,
    head: [['Metric', 'Value']],
    body: formatKV(scan.structure_analysis || {}),
    styles: { cellPadding: 3, fontSize: 10 },
    headStyles: { fillColor: [76, 175, 80] },
  });

  // Threat Pattern Detection
  const patterns = Object.entries(scan.pattern_detection || {}).map(([k, v]) => [
    k.replaceAll('_', ' '),
    v?.detected ? 'Yes' : 'No',
    String(v?.count ?? 0),
  ]);
  const startPat = doc.lastAutoTable.finalY + 8;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Threat Pattern Detection', 14, startPat);
  autoTable(doc, {
    startY: startPat + 3,
    head: [['Category', 'Detected', 'Count']],
    body: patterns,
    styles: { cellPadding: 3, fontSize: 10 },
    headStyles: { fillColor: [244, 67, 54] },
  });

  // Appendix: Raw JSON
  let y = doc.lastAutoTable.finalY + 10;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Appendix: Raw JSON', 14, y);
  y += 5;
  doc.setFont('courier', 'normal');
  doc.setFontSize(8);
  const json = JSON.stringify(scan, null, 2);
  const lines = wrapJson(doc, json);
  lines.forEach((line) => {
    if (y > 285) {
      doc.addPage();
      y = 20;
    }
    doc.text(line, 14, y);
    y += 4;
  });

  addFooter(doc);
  const fileSafe = (scan.url || filenameHint).replace(/[^a-z0-9._-]+/gi, '-').slice(0, 60);
  doc.save(`${fileSafe || 'url-scan'}-${Date.now()}.pdf`);
}

export function downloadFileScanPDF(scan, filenameHint = 'file-scan-report') {
  const doc = new jsPDF();
  addHeader(doc, 'File Security Scan Report');

  // Summary
  const summaryBody = [
    ['Filename', scan.filename || '-'],
    ['SHA256', scan.sha256 || '-'],
    ['Malicious', scan.malicious ? 'Yes' : 'No'],
  ];

  autoTable(doc, {
    startY: 26,
    head: [['Field', 'Value']],
    body: summaryBody,
    styles: { cellPadding: 3, fontSize: 10 },
    headStyles: { fillColor: [33, 150, 243] },
  });

  // Scan Status
  const yaraMatches = scan.yara?.matches || [];
  const clamStatus = scan.clamav?.status || '-';
  const startStatus = doc.lastAutoTable.finalY + 8;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Scan Status', 14, startStatus);
  autoTable(doc, {
    startY: startStatus + 3,
    head: [['Scanner', 'Result']],
    body: [
      ['YARA', yaraMatches.length > 0 ? `Threats Found (${yaraMatches.length})` : 'Clean'],
      ['ClamAV', clamStatus === 'infected' ? 'Infected' : clamStatus || '-'],
    ],
    styles: { cellPadding: 3, fontSize: 10 },
    headStyles: { fillColor: [76, 175, 80] },
  });

  // PE Analysis
  if (scan.pe_analysis && Object.keys(scan.pe_analysis).length) {
    const startPE = doc.lastAutoTable.finalY + 8;
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('PE Analysis', 14, startPE);
    autoTable(doc, {
      startY: startPE + 3,
      head: [['Property', 'Value']],
      body: formatKV(scan.pe_analysis),
      styles: { cellPadding: 3, fontSize: 10 },
      headStyles: { fillColor: [96, 125, 139] },
    });
  }

  // Extracted Strings (sample)
  if (Array.isArray(scan.strings_sample) && scan.strings_sample.length) {
    const startStr = doc.lastAutoTable.finalY + 8;
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('Extracted Strings (Sample)', 14, startStr);
    const rows = scan.strings_sample.slice(0, 50).map((s, i) => [String(i + 1), String(s)]);
    autoTable(doc, {
      startY: startStr + 3,
      head: [['#', 'String']],
      body: rows,
      styles: { cellPadding: 3, fontSize: 8 },
      headStyles: { fillColor: [158, 158, 158] },
    });
  }

  // Appendix: Raw JSON
  let y = doc.lastAutoTable.finalY + 10;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Appendix: Raw JSON', 14, y);
  y += 5;
  doc.setFont('courier', 'normal');
  doc.setFontSize(8);
  const json = JSON.stringify(scan, null, 2);
  const lines = wrapJson(doc, json);
  lines.forEach((line) => {
    if (y > 285) {
      doc.addPage();
      y = 20;
    }
    doc.text(line, 14, y);
    y += 4;
  });

  addFooter(doc);
  const fileSafe = (scan.filename || filenameHint).replace(/[^a-z0-9._-]+/gi, '-').slice(0, 60);
  doc.save(`${fileSafe || 'file-scan'}-${Date.now()}.pdf`);
}

export function downloadLogScanPDF(report, filenameHint = 'log-scan-report') {
  const doc = new jsPDF();
  addHeader(doc, 'Log Analysis Report');

  // Summary
  const summaryBody = [
    ['Lines', report?.summary?.lines ?? '-'],
    ['Bytes', report?.summary?.bytes ?? '-'],
    ['Start', report?.summary?.time_start ?? '-'],
    ['End', report?.summary?.time_end ?? '-'],
    ['Duration (s)', report?.summary?.duration_seconds ?? '-'],
    ['Risk Score', `${report?.risk_score ?? '-'} / 100`],
    ['Threat Level', report?.threat_level ?? '-'],
  ];

  autoTable(doc, {
    startY: 26,
    head: [['Field', 'Value']],
    body: summaryBody,
    styles: { cellPadding: 3, fontSize: 10 },
    headStyles: { fillColor: [37, 99, 235] },
  });

  // Counts
  const startCounts = doc.lastAutoTable.finalY + 8;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Counts', 14, startCounts);
  const countsRows = [
    ...Object.entries(report?.counts?.by_level || {}).map(([k, v]) => [`Level: ${k}`, String(v)]),
    ...Object.entries(report?.counts?.status_codes || {}).map(([k, v]) => [`HTTP ${k}`, String(v)]),
  ];
  if (countsRows.length) {
    autoTable(doc, {
      startY: startCounts + 3,
      head: [['Metric', 'Count']],
      body: countsRows,
      styles: { cellPadding: 3, fontSize: 10 },
      headStyles: { fillColor: [76, 175, 80] },
    });
  }

  // Top IPs
  const startIPs = (doc.lastAutoTable?.finalY || startCounts + 3) + 8;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Top IPs', 14, startIPs);
  const ipRows = (report?.top?.ips || []).map(([ip, c]) => [String(ip), String(c)]);
  if (ipRows.length) {
    autoTable(doc, {
      startY: startIPs + 3,
      head: [['IP', 'Count']],
      body: ipRows,
      styles: { cellPadding: 3, fontSize: 10 },
      headStyles: { fillColor: [158, 158, 158] },
    });
  }

  // Top URLs
  const startURLs = (doc.lastAutoTable?.finalY || startIPs + 3) + 8;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Top URLs', 14, startURLs);
  const urlRows = (report?.top?.urls || []).map(([u, c]) => [String(u), String(c)]);
  if (urlRows.length) {
    autoTable(doc, {
      startY: startURLs + 3,
      head: [['URL', 'Count']],
      body: urlRows,
      styles: { cellPadding: 3, fontSize: 9 },
      headStyles: { fillColor: [244, 67, 54] },
    });
  }

  // Suspicious patterns
  const startSus = (doc.lastAutoTable?.finalY || startURLs + 3) + 8;
  const patterns = (report?.detections?.suspicious_patterns || []).slice(0, 50)
    .map((hit, i) => [String(i + 1), String(hit?.pattern || '-'), String(hit?.line || '-')]);
  if (patterns.length) {
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('Suspicious Patterns', 14, startSus);
    autoTable(doc, {
      startY: startSus + 3,
      head: [['#', 'Pattern', 'Line']],
      body: patterns,
      styles: { cellPadding: 3, fontSize: 8 },
      headStyles: { fillColor: [255, 193, 7] },
    });
  }

  // Timeline (per minute)
  const timelineEntries = Object.entries(report?.timeline || {});
  if (timelineEntries.length) {
    const startTl = (doc.lastAutoTable?.finalY || startSus + 3) + 8;
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('Timeline (per minute)', 14, startTl);
    autoTable(doc, {
      startY: startTl + 3,
      head: [['Timestamp', 'Events']],
      body: timelineEntries.map(([ts, c]) => [String(ts), String(c)]),
      styles: { cellPadding: 3, fontSize: 9 },
      headStyles: { fillColor: [33, 150, 243] },
    });
  }

  // Appendix: Raw JSON
  let y = (doc.lastAutoTable?.finalY || 26) + 10;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Appendix: Raw JSON', 14, y);
  y += 5;
  doc.setFont('courier', 'normal');
  doc.setFontSize(8);
  const json = JSON.stringify(report, null, 2);
  const lines = doc.splitTextToSize(json, 182);
  lines.forEach((line) => {
    if (y > 285) {
      doc.addPage();
      y = 20;
    }
    doc.text(line, 14, y);
    y += 4;
  });

  addFooter(doc);
  const fileSafe = (filenameHint || 'log-scan').replace(/[^a-z0-9._-]+/gi, '-').slice(0, 60);
  doc.save(`${fileSafe || 'log-scan'}-${Date.now()}.pdf`);
}
